// Code generated by MockGen. DO NOT EDIT.
// Source: tag-service.go
//
// Generated by this command:
//
//	mockgen -source tag-service.go -typed -destination ../generated/mock/services/mock_tag-service.go ITagService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	domain "github.com/TheSandyDave/Media-Tags/domain"
	services "github.com/TheSandyDave/Media-Tags/services"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockITagService is a mock of ITagService interface.
type MockITagService struct {
	ctrl     *gomock.Controller
	recorder *MockITagServiceMockRecorder
	isgomock struct{}
}

// MockITagServiceMockRecorder is the mock recorder for MockITagService.
type MockITagServiceMockRecorder struct {
	mock *MockITagService
}

// NewMockITagService creates a new mock instance.
func NewMockITagService(ctrl *gomock.Controller) *MockITagService {
	mock := &MockITagService{ctrl: ctrl}
	mock.recorder = &MockITagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITagService) EXPECT() *MockITagServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITagService) Create(ctx context.Context, item ...*domain.Tag) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range item {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITagServiceMockRecorder) Create(ctx any, item ...any) *MockITagServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, item...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITagService)(nil).Create), varargs...)
	return &MockITagServiceCreateCall{Call: call}
}

// MockITagServiceCreateCall wrap *gomock.Call
type MockITagServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITagServiceCreateCall) Return(arg0 error) *MockITagServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITagServiceCreateCall) Do(f func(context.Context, ...*domain.Tag) error) *MockITagServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITagServiceCreateCall) DoAndReturn(f func(context.Context, ...*domain.Tag) error) *MockITagServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockITagService) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITagServiceMockRecorder) Delete(ctx, id any) *MockITagServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITagService)(nil).Delete), ctx, id)
	return &MockITagServiceDeleteCall{Call: call}
}

// MockITagServiceDeleteCall wrap *gomock.Call
type MockITagServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITagServiceDeleteCall) Return(arg0 error) *MockITagServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITagServiceDeleteCall) Do(f func(context.Context, uuid.UUID) error) *MockITagServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITagServiceDeleteCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockITagServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockITagService) Get(ctx context.Context, options ...services.Option[domain.Tag]) ([]*domain.Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].([]*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockITagServiceMockRecorder) Get(ctx any, options ...any) *MockITagServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITagService)(nil).Get), varargs...)
	return &MockITagServiceGetCall{Call: call}
}

// MockITagServiceGetCall wrap *gomock.Call
type MockITagServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITagServiceGetCall) Return(arg0 []*domain.Tag, arg1 error) *MockITagServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITagServiceGetCall) Do(f func(context.Context, ...services.Option[domain.Tag]) ([]*domain.Tag, error)) *MockITagServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITagServiceGetCall) DoAndReturn(f func(context.Context, ...services.Option[domain.Tag]) ([]*domain.Tag, error)) *MockITagServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWithID mocks base method.
func (m *MockITagService) GetWithID(ctx context.Context, id uuid.UUID, options ...services.Option[domain.Tag]) (*domain.Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithID", varargs...)
	ret0, _ := ret[0].(*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithID indicates an expected call of GetWithID.
func (mr *MockITagServiceMockRecorder) GetWithID(ctx, id any, options ...any) *MockITagServiceGetWithIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithID", reflect.TypeOf((*MockITagService)(nil).GetWithID), varargs...)
	return &MockITagServiceGetWithIDCall{Call: call}
}

// MockITagServiceGetWithIDCall wrap *gomock.Call
type MockITagServiceGetWithIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITagServiceGetWithIDCall) Return(arg0 *domain.Tag, arg1 error) *MockITagServiceGetWithIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITagServiceGetWithIDCall) Do(f func(context.Context, uuid.UUID, ...services.Option[domain.Tag]) (*domain.Tag, error)) *MockITagServiceGetWithIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITagServiceGetWithIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...services.Option[domain.Tag]) (*domain.Tag, error)) *MockITagServiceGetWithIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWithIDs mocks base method.
func (m *MockITagService) GetWithIDs(ctx context.Context, ids []uuid.UUID, options ...services.Option[domain.Tag]) ([]*domain.Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ids}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithIDs", varargs...)
	ret0, _ := ret[0].([]*domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithIDs indicates an expected call of GetWithIDs.
func (mr *MockITagServiceMockRecorder) GetWithIDs(ctx, ids any, options ...any) *MockITagServiceGetWithIDsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ids}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithIDs", reflect.TypeOf((*MockITagService)(nil).GetWithIDs), varargs...)
	return &MockITagServiceGetWithIDsCall{Call: call}
}

// MockITagServiceGetWithIDsCall wrap *gomock.Call
type MockITagServiceGetWithIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITagServiceGetWithIDsCall) Return(arg0 []*domain.Tag, arg1 error) *MockITagServiceGetWithIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITagServiceGetWithIDsCall) Do(f func(context.Context, []uuid.UUID, ...services.Option[domain.Tag]) ([]*domain.Tag, error)) *MockITagServiceGetWithIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITagServiceGetWithIDsCall) DoAndReturn(f func(context.Context, []uuid.UUID, ...services.Option[domain.Tag]) ([]*domain.Tag, error)) *MockITagServiceGetWithIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
