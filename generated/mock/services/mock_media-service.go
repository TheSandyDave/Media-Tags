// Code generated by MockGen. DO NOT EDIT.
// Source: media-service.go
//
// Generated by this command:
//
//	mockgen -source media-service.go -typed -destination ../generated/mock/services/mock_media-service.go IMediaService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	domain "github.com/TheSandyDave/Media-Tags/domain"
	services "github.com/TheSandyDave/Media-Tags/services"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIMediaService is a mock of IMediaService interface.
type MockIMediaService struct {
	ctrl     *gomock.Controller
	recorder *MockIMediaServiceMockRecorder
	isgomock struct{}
}

// MockIMediaServiceMockRecorder is the mock recorder for MockIMediaService.
type MockIMediaServiceMockRecorder struct {
	mock *MockIMediaService
}

// NewMockIMediaService creates a new mock instance.
func NewMockIMediaService(ctrl *gomock.Controller) *MockIMediaService {
	mock := &MockIMediaService{ctrl: ctrl}
	mock.recorder = &MockIMediaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMediaService) EXPECT() *MockIMediaServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIMediaService) Create(ctx context.Context, item ...*domain.Media) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range item {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIMediaServiceMockRecorder) Create(ctx any, item ...any) *MockIMediaServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, item...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIMediaService)(nil).Create), varargs...)
	return &MockIMediaServiceCreateCall{Call: call}
}

// MockIMediaServiceCreateCall wrap *gomock.Call
type MockIMediaServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMediaServiceCreateCall) Return(arg0 error) *MockIMediaServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMediaServiceCreateCall) Do(f func(context.Context, ...*domain.Media) error) *MockIMediaServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMediaServiceCreateCall) DoAndReturn(f func(context.Context, ...*domain.Media) error) *MockIMediaServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockIMediaService) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIMediaServiceMockRecorder) Delete(ctx, id any) *MockIMediaServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIMediaService)(nil).Delete), ctx, id)
	return &MockIMediaServiceDeleteCall{Call: call}
}

// MockIMediaServiceDeleteCall wrap *gomock.Call
type MockIMediaServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMediaServiceDeleteCall) Return(arg0 error) *MockIMediaServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMediaServiceDeleteCall) Do(f func(context.Context, uuid.UUID) error) *MockIMediaServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMediaServiceDeleteCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockIMediaServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilterByTagOption mocks base method.
func (m *MockIMediaService) FilterByTagOption(tag string) services.Option[domain.Media] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByTagOption", tag)
	ret0, _ := ret[0].(services.Option[domain.Media])
	return ret0
}

// FilterByTagOption indicates an expected call of FilterByTagOption.
func (mr *MockIMediaServiceMockRecorder) FilterByTagOption(tag any) *MockIMediaServiceFilterByTagOptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByTagOption", reflect.TypeOf((*MockIMediaService)(nil).FilterByTagOption), tag)
	return &MockIMediaServiceFilterByTagOptionCall{Call: call}
}

// MockIMediaServiceFilterByTagOptionCall wrap *gomock.Call
type MockIMediaServiceFilterByTagOptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMediaServiceFilterByTagOptionCall) Return(arg0 services.Option[domain.Media]) *MockIMediaServiceFilterByTagOptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMediaServiceFilterByTagOptionCall) Do(f func(string) services.Option[domain.Media]) *MockIMediaServiceFilterByTagOptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMediaServiceFilterByTagOptionCall) DoAndReturn(f func(string) services.Option[domain.Media]) *MockIMediaServiceFilterByTagOptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIMediaService) Get(ctx context.Context, options ...services.Option[domain.Media]) ([]*domain.Media, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].([]*domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIMediaServiceMockRecorder) Get(ctx any, options ...any) *MockIMediaServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMediaService)(nil).Get), varargs...)
	return &MockIMediaServiceGetCall{Call: call}
}

// MockIMediaServiceGetCall wrap *gomock.Call
type MockIMediaServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMediaServiceGetCall) Return(arg0 []*domain.Media, arg1 error) *MockIMediaServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMediaServiceGetCall) Do(f func(context.Context, ...services.Option[domain.Media]) ([]*domain.Media, error)) *MockIMediaServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMediaServiceGetCall) DoAndReturn(f func(context.Context, ...services.Option[domain.Media]) ([]*domain.Media, error)) *MockIMediaServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWithID mocks base method.
func (m *MockIMediaService) GetWithID(ctx context.Context, id uuid.UUID, options ...services.Option[domain.Media]) (*domain.Media, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithID", varargs...)
	ret0, _ := ret[0].(*domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithID indicates an expected call of GetWithID.
func (mr *MockIMediaServiceMockRecorder) GetWithID(ctx, id any, options ...any) *MockIMediaServiceGetWithIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithID", reflect.TypeOf((*MockIMediaService)(nil).GetWithID), varargs...)
	return &MockIMediaServiceGetWithIDCall{Call: call}
}

// MockIMediaServiceGetWithIDCall wrap *gomock.Call
type MockIMediaServiceGetWithIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMediaServiceGetWithIDCall) Return(arg0 *domain.Media, arg1 error) *MockIMediaServiceGetWithIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMediaServiceGetWithIDCall) Do(f func(context.Context, uuid.UUID, ...services.Option[domain.Media]) (*domain.Media, error)) *MockIMediaServiceGetWithIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMediaServiceGetWithIDCall) DoAndReturn(f func(context.Context, uuid.UUID, ...services.Option[domain.Media]) (*domain.Media, error)) *MockIMediaServiceGetWithIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWithIDs mocks base method.
func (m *MockIMediaService) GetWithIDs(ctx context.Context, ids []uuid.UUID, options ...services.Option[domain.Media]) ([]*domain.Media, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ids}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithIDs", varargs...)
	ret0, _ := ret[0].([]*domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithIDs indicates an expected call of GetWithIDs.
func (mr *MockIMediaServiceMockRecorder) GetWithIDs(ctx, ids any, options ...any) *MockIMediaServiceGetWithIDsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ids}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithIDs", reflect.TypeOf((*MockIMediaService)(nil).GetWithIDs), varargs...)
	return &MockIMediaServiceGetWithIDsCall{Call: call}
}

// MockIMediaServiceGetWithIDsCall wrap *gomock.Call
type MockIMediaServiceGetWithIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMediaServiceGetWithIDsCall) Return(arg0 []*domain.Media, arg1 error) *MockIMediaServiceGetWithIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMediaServiceGetWithIDsCall) Do(f func(context.Context, []uuid.UUID, ...services.Option[domain.Media]) ([]*domain.Media, error)) *MockIMediaServiceGetWithIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMediaServiceGetWithIDsCall) DoAndReturn(f func(context.Context, []uuid.UUID, ...services.Option[domain.Media]) ([]*domain.Media, error)) *MockIMediaServiceGetWithIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
